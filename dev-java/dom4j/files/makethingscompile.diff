diff -uNr dom4j-1.4/src/java/org/dom4j/DocumentFactory.java dom4j-1.4.new/src/java/org/dom4j/DocumentFactory.java
--- dom4j-1.4/src/java/org/dom4j/DocumentFactory.java	2003-04-07 22:51:31.000000000 +0200
+++ dom4j-1.4.new/src/java/org/dom4j/DocumentFactory.java	2007-05-25 18:50:27.306129724 +0200
@@ -184,13 +184,20 @@
       * @return a new <code>XPath</code> instance
       * @throws InvalidXPathException if the XPath expression is invalid
       */
-    public XPath createXPath(String xpathExpression) throws InvalidXPathException {
-        DefaultXPath xpath = new DefaultXPath( xpathExpression );
-        if ( xpathNamespaceURIs != null ) {
-            xpath.setNamespaceURIs( xpathNamespaceURIs );
+    public XPath createXPath(String xpathExpression) {
+	try{
+		DefaultXPath xpath = new DefaultXPath( xpathExpression );
+		if ( xpathNamespaceURIs != null ) {
+		    xpath.setNamespaceURIs( xpathNamespaceURIs );
+		}
+		return xpath;
+	}
+        catch (org.jaxen.JaxenException e) {		
+            System.out.println("error in createXPath(String xpathExpression)");
+	    return null;
         }
-        return xpath;
     }
+    
 
     /** <p><code>createXPath</code> parses an XPath expression
       * and creates a new XPath <code>XPath</code> instance.</p>
@@ -245,7 +252,7 @@
       * to create
       * @return a new <code>Pattern</code> instance
       */
-    public Pattern createPattern(String xpathPattern) {
+    public Pattern createPattern(String xpathPattern) throws org.jaxen.JaxenException {
         return new XPathPattern( xpathPattern );
     }
 
diff -uNr dom4j-1.4/src/java/org/dom4j/DocumentHelper.java dom4j-1.4.new/src/java/org/dom4j/DocumentHelper.java
--- dom4j-1.4/src/java/org/dom4j/DocumentHelper.java	2003-04-07 22:51:30.000000000 +0200
+++ dom4j-1.4.new/src/java/org/dom4j/DocumentHelper.java	2007-05-25 18:50:27.306129724 +0200
@@ -145,7 +145,7 @@
       * to create
       * @return a new <code>Pattern</code> instance
       */
-    public static Pattern createPattern(String xpathPattern) {
+    public static Pattern createPattern(String xpathPattern) throws org.jaxen.JaxenException {
         return DocumentFactory.getInstance().createPattern(xpathPattern);
     }
     
diff -uNr dom4j-1.4/src/java/org/dom4j/tree/AbstractNode.java dom4j-1.4.new/src/java/org/dom4j/tree/AbstractNode.java
--- dom4j-1.4/src/java/org/dom4j/tree/AbstractNode.java	2003-04-07 22:51:33.000000000 +0200
+++ dom4j-1.4.new/src/java/org/dom4j/tree/AbstractNode.java	2007-05-25 18:50:27.302129357 +0200
@@ -211,7 +211,7 @@
         return getDocumentFactory().createXPathFilter(patternText);
     }
     
-    public Pattern createPattern(String patternText) {
+    public Pattern createPattern(String patternText) throws org.jaxen.JaxenException {
         return getDocumentFactory().createPattern(patternText);
     }
     
diff -uNr dom4j-1.4/src/java/org/dom4j/util/ProxyDocumentFactory.java dom4j-1.4.new/src/java/org/dom4j/util/ProxyDocumentFactory.java
--- dom4j-1.4/src/java/org/dom4j/util/ProxyDocumentFactory.java	2003-04-07 22:51:34.000000000 +0200
+++ dom4j-1.4.new/src/java/org/dom4j/util/ProxyDocumentFactory.java	2007-05-25 18:50:27.306129724 +0200
@@ -147,7 +147,7 @@
         return proxy.createXPathFilter(xpathFilterExpression);
     }
     
-    public Pattern createPattern(String xpathPattern) {
+    public Pattern createPattern(String xpathPattern) throws org.jaxen.JaxenException {
         return proxy.createPattern(xpathPattern);
     }
     
diff -uNr dom4j-1.4/src/java/org/dom4j/xpath/DefaultXPath.java dom4j-1.4.new/src/java/org/dom4j/xpath/DefaultXPath.java
--- dom4j-1.4/src/java/org/dom4j/xpath/DefaultXPath.java	2003-04-07 22:51:33.000000000 +0200
+++ dom4j-1.4.new/src/java/org/dom4j/xpath/DefaultXPath.java	2007-05-25 18:50:27.306129724 +0200
@@ -58,7 +58,7 @@
 
     /** Construct an XPath
      */
-    public DefaultXPath(String text) throws InvalidXPathException {
+    public DefaultXPath(String text) throws org.jaxen.JaxenException {
         this.text = text;
         this.xpath = parse( text );
     }
@@ -308,13 +308,10 @@
         return valueOf( node );
     }
     
-    protected static XPath parse(String text) {        
+    protected static XPath parse(String text) throws JaxenException {        
         try {
             return new Dom4jXPath( text );
         }
-        catch (SAXPathException e) {
-            throw new InvalidXPathException( text, e.getMessage() );
-        }
         catch (RuntimeException e) {
         }
         throw new InvalidXPathException( text );
diff -uNr dom4j-1.4/src/java/org/dom4j/xpath/XPathPattern.java dom4j-1.4.new/src/java/org/dom4j/xpath/XPathPattern.java
--- dom4j-1.4/src/java/org/dom4j/xpath/XPathPattern.java	2003-04-07 22:51:31.000000000 +0200
+++ dom4j-1.4.new/src/java/org/dom4j/xpath/XPathPattern.java	2007-05-25 18:50:27.306129724 +0200
@@ -57,15 +57,15 @@
         this.context = new Context( getContextSupport() );
     }
 
-    public XPathPattern(String text) {
+    public XPathPattern(String text) throws org.jaxen.JaxenException {
         this.text = text;
         this.context = new Context( getContextSupport() );
         try {
             this.pattern = PatternParser.parse( text );
         }
-        catch (SAXPathException e) {
-            throw new InvalidXPathException( text, e.getMessage() );
-        }
+        catch (org.jaxen.saxpath.SAXPathException e) {
+	            throw new InvalidXPathException( text, e.getMessage() );
+	       }
         catch (RuntimeException e) {
             throw new InvalidXPathException( text );
         }
diff -uNr dom4j-1.4/src/java/org/dom4j/xpp/ProxyXmlStartTag.java dom4j-1.4.new/src/java/org/dom4j/xpp/ProxyXmlStartTag.java
--- dom4j-1.4/src/java/org/dom4j/xpp/ProxyXmlStartTag.java	2003-04-07 22:51:31.000000000 +0200
+++ dom4j-1.4.new/src/java/org/dom4j/xpp/ProxyXmlStartTag.java	2007-05-25 18:50:27.306129724 +0200
@@ -35,7 +35,18 @@
     /** The factory used to create new elements */
     private DocumentFactory factory = DocumentFactory.getInstance();
 
-    
+    	/* to compile */
+	public  boolean removeAttributeByName(String a,String b){
+		return true;
+	}
+
+	public  boolean removeAttributeByRawName(String a){
+		return true;
+	}
+
+	public void removeAttributes(){}
+	/**/
+
     public ProxyXmlStartTag() { 
     }
     
