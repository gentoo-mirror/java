Index: maven-project-2.0_pre20070529/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java
===================================================================
--- maven-project-2.0_pre20070529/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java	(r√©vision 542962)
+++ maven-project-2.0_pre20070529/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java	(copie de travail)
@@ -476,9 +476,11 @@
     {
         Model model = readModel( "unknown", projectDescriptor, true );
 
+		System.out.println( "buildFromSourceFileInternal");
         MavenProject project = buildInternal( projectDescriptor.getAbsolutePath(), model, localRepository,
                                               buildArtifactRepositories( getSuperModel() ), projectDescriptor,
                                               profileManager, true );
+ 		System.out.println( "buildFromSourceFileInternal_"); 
 
         if ( checkDistributionManagementStatus )
         {
@@ -523,6 +525,9 @@
 
         try
         {
+
+//		projectArtifact.setScope("system");
+ 		System.out.println( "d"); 
             artifactResolver.resolve( projectArtifact, remoteArtifactRepositories, localRepository );
 
             File file = projectArtifact.getFile();
@@ -533,8 +538,12 @@
 
             ArtifactStatus status = ArtifactStatus.NONE;
 
+
+ 		System.out.println( "b"); 
             DistributionManagement distributionManagement = model.getDistributionManagement();
 
+ 		System.out.println( "c"); 
+
             if ( distributionManagement != null )
             {
                 downloadUrl = distributionManagement.getDownloadUrl();
@@ -542,8 +551,11 @@
                 status = ArtifactStatus.valueOf( distributionManagement.getStatus() );
             }
 
+
+ 		System.out.println( "a"); 
             checkStatusAndUpdate( projectArtifact, status, file, remoteArtifactRepositories, localRepository );
 
+
             // TODO: this is gross. Would like to give it the whole model, but maven-artifact shouldn't depend on that
             // Can a maven-core implementation of the Artifact interface store it, and be used in the exceptions?
             if ( downloadUrl != null )
@@ -746,8 +758,10 @@
         MavenProject project = null;
         try
         {
+ 		System.out.println( "buildInternal"); 
             project = assembleLineage( model, lineage, localRepository, projectDir, parentSearchRepositories,
                                        aggregatedRemoteWagonRepositories, externalProfileManager, strict );
+ 		System.out.println( "buildInternala"); 
         }
         catch ( InvalidRepositoryException e )
         {
@@ -1086,7 +1100,9 @@
                 e.getMessage(), e );
         }
 
+		System.out.println( "al");
         MavenProject project = new MavenProject( model );
+ 		System.out.println( "alb"); 
 
         project.setActiveProfiles( activeProfiles );
 
@@ -1224,6 +1240,7 @@
 
             Artifact parentArtifact = null;
 
+ 		System.out.println( "alc"); 
             // only resolve the parent model from the repository system if we didn't find it on disk...
             if ( model == null )
             {
@@ -1251,10 +1268,12 @@
                         project.getId() + " from the repository." );
                 }
 
+
                 parentArtifact = artifactFactory.createParentArtifact( parentModel.getGroupId(),
                                                                        parentModel.getArtifactId(),
                                                                        parentModel.getVersion() );
 
+
                 try
                 {
                     model = findModelFromRepository( parentArtifact, remoteRepositories, localRepository, false );
@@ -1266,6 +1285,9 @@
                 }
             }
 
+			
+
+ 		System.out.println( "alf"); 
             if ( model != null && !"pom".equals( model.getPackaging() ) )
             {
                 throw new ProjectBuildingException( projectId, "Parent: " + model.getId() + " of project: " +
@@ -1278,10 +1300,14 @@
                 parentProjectDir = parentDescriptor.getParentFile();
             }
 
+
+ 		System.out.println( "ald"); 
             MavenProject parent = assembleLineage( model, lineage, localRepository, parentProjectDir,
                                                    parentSearchRepositories, aggregatedRemoteWagonRepositories,
                                                    externalProfileManager, strict );
 
+
+ 		System.out.println( "ale"); 
             parent.setFile( parentDescriptor );
 
             project.setParent( parent );
